
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Pencil, QrCode, MapPin, Clock } from "lucide-react"; // Added Clock icon
import { format } from "date-fns";
import { Skeleton } from "@/components/ui/skeleton";
import { Link } from 'react-router-dom'; // Added Link for navigation

// Utility function to create page URLs (assuming a simple mapping for demonstration)
// In a real application, this might be handled by a router configuration or a more robust utility.
const createPageUrl = (pageName) => {
  switch (pageName) {
    case 'HistoricoAtivo':
      return '/historico-ativo';
    // Add other page mappings if necessary
    default:
      return '/';
  }
};

export default function ListaAtivos({ ativos, isLoading, onEdit, onViewQR }) {
  const getStatusColor = (status) => {
    switch (status) {
      case 'operacional': return 'bg-green-100 text-green-800';
      case 'manutencao': return 'bg-blue-100 text-blue-800';
      case 'quebrado': return 'bg-red-100 text-red-800';
      case 'inativo': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTipoAtivoLabel = (tipo) => {
    switch (tipo) {
      case 'ar_condicionado': return 'Ar-Condicionado';
      case 'mecalor': return 'Mecalor';
      case 'ar_maquina': return 'Ar Máquina';
      default: return tipo;
    }
  };

  return (
    <Card className="shadow-lg border-none">
      <CardHeader className="border-b border-slate-200 bg-gradient-to-r from-blue-50 to-slate-50">
        <CardTitle className="text-xl font-bold text-slate-900">Lista de Ativos</CardTitle>
      </CardHeader>
      <CardContent className="p-0">
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="bg-slate-50">
                <TableHead>Código</TableHead>
                <TableHead>Nome</TableHead>
                <TableHead>Tipo</TableHead>
                <TableHead>Localização</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Próxima Manutenção</TableHead>
                <TableHead className="text-right">Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                Array(5).fill(0).map((_, i) => (
                  <TableRow key={i}>
                    <TableCell><Skeleton className="h-4 w-16" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-32" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-24" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-28" /></TableCell>
                    <TableCell><Skeleton className="h-6 w-20 rounded-full" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-24" /></TableCell>
                    <TableCell><Skeleton className="h-8 w-16" /></TableCell>
                  </TableRow>
                ))
              ) : ativos.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={7} className="text-center py-8 text-slate-500">
                    Nenhum ativo cadastrado
                  </TableCell>
                </TableRow>
              ) : (
                ativos.map((ativo) => (
                  <TableRow key={ativo.id} className="hover:bg-slate-50 transition-colors">
                    <TableCell className="font-medium">{ativo.codigo}</TableCell>
                    <TableCell>{ativo.nome}</TableCell>
                    <TableCell>
                      <Badge variant="outline">
                        {getTipoAtivoLabel(ativo.tipo_ativo)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-1 text-sm">
                        <MapPin className="w-3 h-3 text-slate-400" />
                        {ativo.localizacao_primaria}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge className={getStatusColor(ativo.status_operacional)}>
                        {ativo.status_operacional}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {ativo.proxima_manutencao ? format(new Date(ativo.proxima_manutencao), 'dd/MM/yyyy') : '-'}
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        {/* New "Ver Histórico" button */}
                        <Link to={`${createPageUrl('HistoricoAtivo')}?id=${ativo.id}`}>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="hover:bg-purple-50"
                            title="Ver Histórico"
                          >
                            <Clock className="w-4 h-4" />
                          </Button>
                        </Link>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onViewQR(ativo)}
                          className="hover:bg-blue-50"
                          title="Gerar QR Code"
                        >
                          <QrCode className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onEdit(ativo)}
                          className="hover:bg-slate-100"
                          title="Editar Ativo"
                        >
                          <Pencil className="w-4 h-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}
