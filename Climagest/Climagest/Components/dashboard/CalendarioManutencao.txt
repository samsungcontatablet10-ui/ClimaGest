import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Calendar, AlertTriangle, CheckCircle, Clock } from "lucide-react";
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, parseISO } from "date-fns";
import { ptBR } from "date-fns/locale";

export default function CalendarioManutencao({ ordensServico }) {
  const [currentMonth, setCurrentMonth] = useState(new Date());

  const monthStart = startOfMonth(currentMonth);
  const monthEnd = endOfMonth(currentMonth);
  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });

  const getOSForDay = (day) => {
    return ordensServico.filter(os => {
      if (!os.data_prevista) return false;
      return isSameDay(parseISO(os.data_prevista), day);
    });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'concluida': return 'bg-green-100 text-green-800';
      case 'em_andamento': return 'bg-blue-100 text-blue-800';
      case 'pendente': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <Card className="shadow-lg border-none">
      <CardHeader className="border-b border-slate-200 bg-gradient-to-r from-blue-50 to-slate-50">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-xl font-bold text-slate-900">
            <Calendar className="w-5 h-5 text-blue-600" />
            Calendário de Manutenções
          </CardTitle>
          <div className="text-sm font-medium text-slate-600">
            {format(currentMonth, 'MMMM yyyy', { locale: ptBR })}
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        <div className="grid grid-cols-7 gap-2">
          {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map(day => (
            <div key={day} className="text-center text-sm font-semibold text-slate-600 pb-2">
              {day}
            </div>
          ))}
          {daysInMonth.map(day => {
            const osForDay = getOSForDay(day);
            const isToday = isSameDay(day, new Date());
            
            return (
              <div
                key={day.toString()}
                className={`min-h-24 p-2 rounded-lg border transition-all duration-200 ${
                  isToday 
                    ? 'bg-blue-50 border-blue-300 shadow-md' 
                    : 'bg-white border-slate-200 hover:border-slate-300'
                }`}
              >
                <div className={`text-sm font-medium mb-1 ${
                  isToday ? 'text-blue-700' : 'text-slate-700'
                }`}>
                  {format(day, 'd')}
                </div>
                <div className="space-y-1">
                  {osForDay.slice(0, 2).map((os, idx) => (
                    <Badge 
                      key={idx}
                      className={`${getStatusColor(os.status)} text-xs w-full justify-start truncate`}
                    >
                      {os.ativo_codigo}
                    </Badge>
                  ))}
                  {osForDay.length > 2 && (
                    <div className="text-xs text-slate-500 text-center">
                      +{osForDay.length - 2}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
}