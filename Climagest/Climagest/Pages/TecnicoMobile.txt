import React, { useState, useRef, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Camera, QrCode, CheckCircle, Clock, MapPin, AlertCircle, ArrowLeft, Wrench, Calendar as CalendarIcon, AlertTriangle } from "lucide-react";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";

import ChecklistExecucao from "../components/mobile/ChecklistExecucao";

export default function TecnicoMobile() {
  const [etapa, setEtapa] = useState('scanner'); // scanner, detalhes, checklist, finalizar
  const [codigoBusca, setCodigoBusca] = useState('');
  const [ativoAtual, setAtivoAtual] = useState(null);
  const [osAtual, setOsAtual] = useState(null);
  const [checklistAtual, setChecklistAtual] = useState(null);
  const [showCamera, setShowCamera] = useState(false);
  const [user, setUser] = useState(null);
  const videoRef = useRef(null);
  const streamRef = useRef(null);

  const queryClient = useQueryClient();

  useEffect(() => {
    base44.auth.me().then(setUser).catch(() => {});
  }, []);

  const { data: ativos } = useQuery({
    queryKey: ['ativos'],
    queryFn: () => base44.entities.Ativo.list(),
    initialData: [],
  });

  const { data: ordensServico } = useQuery({
    queryKey: ['ordensServico'],
    queryFn: () => base44.entities.OrdemServico.list(),
    initialData: [],
  });

  const { data: checklists } = useQuery({
    queryKey: ['checklists'],
    queryFn: () => base44.entities.ChecklistTemplate.list(),
    initialData: [],
  });

  const updateAtivoMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.Ativo.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['ativos'] });
    },
  });

  const updateOSMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.OrdemServico.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['ordensServico'] });
    },
  });

  const createOSMutation = useMutation({
    mutationFn: (osData) => base44.entities.OrdemServico.create(osData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['ordensServico'] });
    },
  });

  const createChecklistRespostaMutation = useMutation({
    mutationFn: (data) => base44.entities.ChecklistResposta.create(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['checklistRespostas'] });
    },
  });

  const handleBuscar = () => {
    const ativo = ativos.find(a => 
      a.codigo.toLowerCase() === codigoBusca.toLowerCase() ||
      a.id === codigoBusca ||
      a.numero_serie === codigoBusca
    );
    
    if (ativo) {
      setAtivoAtual(ativo);
      setEtapa('detalhes');
    } else {
      alert('Ativo não encontrado!');
    }
  };

  const iniciarCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'environment' },
        audio: false 
      });
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      setShowCamera(true);
    } catch (err) {
      alert("Não foi possível acessar a câmera.");
    }
  };

  const pararCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    setShowCamera(false);
  };

  const handleIniciarOS = (os) => {
    // Buscar checklist correspondente baseado no tipo da OS
    let checklistCorrespondente = null;
    let tipoManutencao = 'preventiva_mensal';
    
    if (os.tipo_os === 'preventiva') {
      // Determinar se é mensal ou semestral pela descrição ou criar nova lógica
      if (os.descricao_problema?.toLowerCase().includes('semestral')) {
        tipoManutencao = 'preventiva_semestral';
        checklistCorrespondente = checklists.find(c => 
          c.tipo_ativo === ativoAtual.tipo_ativo && 
          c.frequencia === 'semestral'
        );
      } else {
        tipoManutencao = 'preventiva_mensal';
        checklistCorrespondente = checklists.find(c => 
          c.tipo_ativo === ativoAtual.tipo_ativo && 
          c.frequencia === 'mensal'
        );
      }
    } else if (os.tipo_os === 'corretiva') {
      tipoManutencao = 'corretiva';
      checklistCorrespondente = checklists.find(c => 
        c.tipo_ativo === ativoAtual.tipo_ativo && 
        c.nome.toLowerCase().includes('corretiva')
      );
    }
    
    if (checklistCorrespondente) {
      setOsAtual({ ...os, tipo_manutencao: tipoManutencao });
      setChecklistAtual(checklistCorrespondente);
      
      // Marcar OS como "em_andamento"
      updateOSMutation.mutate({
        id: os.id,
        data: {
          status: 'em_andamento',
          tecnico_responsavel: user?.email || 'tecnico@gac.com'
        }
      });
      
      setEtapa('checklist');
    } else {
      alert('Nenhum checklist disponível para este tipo de manutenção');
    }
  };

  const handleAbrirOSCorretiva = async () => {
    // Criar nova OS corretiva
    const novaOS = {
      numero_os: `OS-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      ativo_id: ativoAtual.id,
      ativo_codigo: ativoAtual.codigo,
      tipo_os: 'corretiva',
      status: 'em_andamento',
      prioridade: 'alta',
      data_abertura: format(new Date(), 'yyyy-MM-dd'),
      data_prevista: format(new Date(), 'yyyy-MM-dd'),
      tecnico_responsavel: user?.email || 'tecnico@gac.com',
      descricao_problema: 'Manutenção corretiva - Problema identificado pelo técnico'
    };

    const osCreated = await createOSMutation.mutateAsync(novaOS);
    
    // Buscar checklist corretivo
    const checklistCorretivo = checklists.find(c => 
      c.tipo_ativo === ativoAtual.tipo_ativo && 
      c.nome.toLowerCase().includes('corretiva')
    );

    if (checklistCorretivo) {
      setOsAtual({ ...osCreated, tipo_manutencao: 'corretiva' });
      setChecklistAtual(checklistCorretivo);
      setEtapa('checklist');
    } else {
      alert('Nenhum checklist disponível para manutenção corretiva');
    }
  };

  const handleSalvarChecklist = async (dadosChecklist) => {
    const checklistData = {
      ativo_id: ativoAtual.id,
      checklist_template_id: checklistAtual.id,
      tecnico_email: user?.email || 'tecnico@gac.com',
      data_execucao: format(new Date(), 'yyyy-MM-dd'),
      respostas: dadosChecklist.respostas,
      aprovado_apos_servico: dadosChecklist.aprovado_apos_servico,
      observacoes_gerais: dadosChecklist.observacoes_gerais,
      tipo_manutencao: osAtual.tipo_manutencao,
      fotos_anexadas: dadosChecklist.fotos || [],
      assinatura_digital: dadosChecklist.assinatura_digital
    };

    await createChecklistRespostaMutation.mutateAsync(checklistData);
    
    // Atualizar OS como concluída
    await updateOSMutation.mutateAsync({
      id: osAtual.id,
      data: {
        status: 'concluida',
        data_conclusao: format(new Date(), 'yyyy-MM-dd'),
        descricao_servico_realizado: dadosChecklist.observacoes_gerais
      }
    });
    
    // Atualizar data da última manutenção do ativo
    await updateAtivoMutation.mutateAsync({
      id: ativoAtual.id,
      data: { ultima_manutencao: format(new Date(), 'yyyy-MM-dd') }
    });
    
    setEtapa('finalizar');
  };

  const resetarScanner = () => {
    setEtapa('scanner');
    setCodigoBusca('');
    setAtivoAtual(null);
    setOsAtual(null);
    setChecklistAtual(null);
  };

  const osDoAtivo = ativoAtual ? ordensServico
    .filter(os => os.ativo_id === ativoAtual.id)
    .sort((a, b) => {
      // Priorizar OSs abertas primeiro
      if (a.status !== b.status) {
        const statusOrder = { pendente: 0, em_andamento: 1, concluida: 2, cancelada: 3 };
        return statusOrder[a.status] - statusOrder[b.status];
      }
      return new Date(b.created_date) - new Date(a.created_date);
    }) : [];

  const osAbertas = osDoAtivo.filter(os => os.status === 'pendente' || os.status === 'em_andamento');
  const osHistorico = osDoAtivo.filter(os => os.status === 'concluida').slice(0, 3);

  // ETAPA 1: SCANNER
  if (etapa === 'scanner') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-blue-700 to-blue-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="text-center mb-8 pt-8">
            <div className="w-20 h-20 bg-white/10 backdrop-blur-lg rounded-full flex items-center justify-center mx-auto mb-4">
              <QrCode className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-4xl font-bold text-white mb-2">GAC Mobile</h1>
            <p className="text-blue-100 text-lg">
              {user ? `👷 ${user.full_name}` : 'Modo Técnico'}
            </p>
          </div>

          <Card className="bg-white/95 backdrop-blur-lg shadow-2xl border-none mb-6">
            <CardContent className="p-8">
              <h2 className="text-2xl font-bold text-slate-900 mb-6 text-center">
                Escanear Ativo
              </h2>

              <div className="space-y-4">
                <div className="relative">
                  <Input
                    placeholder="Digite o código (ex: AC-001)"
                    value={codigoBusca}
                    onChange={(e) => setCodigoBusca(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleBuscar()}
                    className="text-lg h-14 pr-12 text-center font-mono"
                  />
                  <QrCode className="absolute right-4 top-4 w-6 h-6 text-slate-400" />
                </div>

                <Button 
                  onClick={handleBuscar}
                  className="w-full h-14 text-lg bg-blue-600 hover:bg-blue-700"
                  disabled={!codigoBusca.trim()}
                >
                  Buscar Ativo
                </Button>

                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-slate-300"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-white text-slate-500">ou</span>
                  </div>
                </div>

                <Button
                  onClick={iniciarCamera}
                  variant="outline"
                  className="w-full h-14 text-lg border-2"
                >
                  <Camera className="w-6 h-6 mr-2" />
                  Usar Câmera
                </Button>
              </div>

              {ativos.length > 0 && (
                <div className="mt-8 pt-6 border-t">
                  <p className="text-sm font-semibold text-slate-600 mb-3">ACESSO RÁPIDO</p>
                  <div className="space-y-2 max-h-48 overflow-y-auto">
                    {ativos.slice(0, 5).map(ativo => (
                      <Button
                        key={ativo.id}
                        variant="ghost"
                        onClick={() => {
                          setAtivoAtual(ativo);
                          setEtapa('detalhes');
                        }}
                        className="w-full justify-start text-left h-auto py-3"
                      >
                        <div className="flex items-center gap-3 w-full">
                          <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                            <QrCode className="w-5 h-5 text-blue-600" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <p className="font-semibold text-slate-900">{ativo.codigo}</p>
                            <p className="text-xs text-slate-500 truncate">{ativo.nome}</p>
                          </div>
                        </div>
                      </Button>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {showCamera && (
          <div className="fixed inset-0 bg-black z-50 flex flex-col">
            <div className="flex-1 relative">
              <video
                ref={videoRef}
                autoPlay
                playsInline
                muted
                className="w-full h-full object-cover"
              />
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-64 h-64 border-4 border-white rounded-2xl shadow-lg"></div>
              </div>
            </div>
            <div className="p-6 bg-black">
              <p className="text-white text-center mb-4">Posicione o QR Code no quadrado</p>
              <Button
                onClick={pararCamera}
                variant="outline"
                className="w-full"
              >
                Fechar Câmera
              </Button>
              <p className="text-xs text-center text-gray-400 mt-2">
                Use a busca manual para continuar
              </p>
            </div>
          </div>
        )}
      </div>
    );
  }

  // ETAPA 2: DETALHES DO ATIVO + ORDENS EM ABERTO
  if (etapa === 'detalhes' && ativoAtual) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-600 via-green-700 to-green-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-3 mb-6 text-white">
            <Button
              onClick={resetarScanner}
              variant="ghost"
              size="icon"
              className="text-white hover:bg-white/20"
            >
              <ArrowLeft className="w-6 h-6" />
            </Button>
            <div>
              <h1 className="text-2xl font-bold">Ativo Encontrado</h1>
              <p className="text-green-100">Selecione uma ordem para executar</p>
            </div>
          </div>

          {/* Card Ativo */}
          <Card className="bg-white shadow-2xl border-none mb-4">
            <CardContent className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <p className="text-3xl font-bold text-slate-900 mb-1">{ativoAtual.codigo}</p>
                  <p className="text-slate-600">{ativoAtual.nome}</p>
                </div>
                <Badge className={`${
                  ativoAtual.status_operacional === 'operacional' 
                    ? 'bg-green-500' 
                    : 'bg-red-500'
                } text-white`}>
                  {ativoAtual.status_operacional}
                </Badge>
              </div>

              <div className="space-y-4 pt-4 border-t">
                <div className="flex items-start gap-3">
                  <MapPin className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div>
                    <p className="text-sm text-slate-500">Localização</p>
                    <p className="font-semibold text-slate-900">{ativoAtual.localizacao_primaria}</p>
                    {ativoAtual.sub_localizacao && (
                      <p className="text-sm text-slate-600">{ativoAtual.sub_localizacao}</p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-slate-500">Tipo</p>
                    <p className="font-medium text-slate-900">{ativoAtual.tipo_ativo}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500">Capacidade</p>
                    <p className="font-medium text-slate-900">
                      {ativoAtual.capacidade} {ativoAtual.unidade_capacidade}
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Ordens em Aberto */}
          {osAbertas.length > 0 ? (
            <div className="space-y-3 mb-4">
              <div className="flex items-center gap-2 text-white">
                <AlertTriangle className="w-5 h-5" />
                <h2 className="font-bold text-lg">Ordens em Aberto ({osAbertas.length})</h2>
              </div>
              
              {osAbertas.map(os => (
                <Card key={os.id} className="bg-white shadow-lg border-none">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <p className="font-bold text-slate-900">{os.numero_os}</p>
                        <p className="text-sm text-slate-600">{os.tipo_os === 'preventiva' ? 'Preventiva' : 'Corretiva'}</p>
                      </div>
                      <Badge className={
                        os.status === 'em_andamento' 
                          ? 'bg-blue-500' 
                          : 'bg-orange-500'
                      }>
                        {os.status === 'em_andamento' ? 'Em Andamento' : 'Pendente'}
                      </Badge>
                    </div>

                    {os.descricao_problema && (
                      <p className="text-sm text-slate-600 mb-3 line-clamp-2">
                        {os.descricao_problema}
                      </p>
                    )}

                    {os.data_prevista && (
                      <div className="flex items-center gap-2 text-sm text-slate-500 mb-3">
                        <CalendarIcon className="w-4 h-4" />
                        <span>Previsto: {format(new Date(os.data_prevista), 'dd/MM/yyyy')}</span>
                      </div>
                    )}

                    <Button
                      onClick={() => handleIniciarOS(os)}
                      className="w-full bg-green-600 hover:bg-green-700"
                    >
                      <CheckCircle className="w-4 h-4 mr-2" />
                      {os.status === 'em_andamento' ? 'Continuar Manutenção' : 'Iniciar Manutenção'}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <Card className="bg-white/10 border-2 border-white/20 backdrop-blur-lg mb-4">
              <CardContent className="p-6 text-center">
                <CheckCircle className="w-12 h-12 text-white mx-auto mb-3 opacity-50" />
                <p className="text-white font-medium mb-1">Nenhuma OS em Aberto</p>
                <p className="text-white/70 text-sm">Todas as manutenções estão em dia</p>
              </CardContent>
            </Card>
          )}

          {/* Botão Abrir Corretiva */}
          <Button
            onClick={handleAbrirOSCorretiva}
            className="w-full h-16 bg-red-600 hover:bg-red-700 text-white shadow-xl mb-4"
          >
            <AlertTriangle className="w-6 h-6 mr-2" />
            <div className="text-left">
              <p className="font-bold">Abrir Manutenção Corretiva</p>
              <p className="text-xs text-red-100">Problema identificado agora</p>
            </div>
          </Button>

          {/* Histórico */}
          {osHistorico.length > 0 && (
            <Card className="bg-white shadow-lg border-none">
              <CardContent className="p-6">
                <h3 className="font-bold text-slate-900 mb-4 flex items-center gap-2">
                  <Clock className="w-5 h-5 text-slate-600" />
                  Histórico Recente
                </h3>
                <div className="space-y-3 max-h-48 overflow-y-auto">
                  {osHistorico.map(os => (
                    <div key={os.id} className="p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex justify-between items-start mb-1">
                        <p className="font-medium text-sm text-slate-900">{os.numero_os}</p>
                        <Badge className="bg-green-100 text-green-800">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Concluída
                        </Badge>
                      </div>
                      <p className="text-xs text-slate-600">
                        {format(new Date(os.data_conclusao || os.created_date), 'dd/MM/yyyy')}
                      </p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    );
  }

  // ETAPA 3: CHECKLIST
  if (etapa === 'checklist' && checklistAtual && osAtual) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-purple-700 to-purple-900 p-4">
        <div className="max-w-2xl mx-auto">
          <div className="flex items-center gap-3 mb-6 text-white">
            <Button
              onClick={() => setEtapa('detalhes')}
              variant="ghost"
              size="icon"
              className="text-white hover:bg-white/20"
            >
              <ArrowLeft className="w-6 h-6" />
            </Button>
            <div>
              <h1 className="text-2xl font-bold">OS: {osAtual.numero_os}</h1>
              <p className="text-purple-100">{checklistAtual.nome}</p>
            </div>
          </div>

          <ChecklistExecucao
            checklist={checklistAtual}
            ativo={ativoAtual}
            onSalvar={handleSalvarChecklist}
            onVoltar={() => setEtapa('detalhes')}
          />
        </div>
      </div>
    );
  }

  // ETAPA 4: FINALIZAR
  if (etapa === 'finalizar') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-600 via-green-700 to-green-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="text-center mb-8 pt-8">
            <div className="w-20 h-20 bg-white/10 backdrop-blur-lg rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-white mb-2">Manutenção Concluída!</h1>
            <p className="text-green-100">OS finalizada com sucesso</p>
          </div>

          <Card className="bg-white shadow-2xl border-none mb-6">
            <CardContent className="p-6 space-y-4">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center gap-2 text-green-800 mb-2">
                  <CheckCircle className="w-5 h-5" />
                  <p className="font-bold">OS Concluída</p>
                </div>
                <p className="text-sm text-green-700 mb-1">
                  <strong>OS:</strong> {osAtual?.numero_os}
                </p>
                <p className="text-sm text-green-700 mb-1">
                  <strong>Equipamento:</strong> {ativoAtual?.codigo}
                </p>
                <p className="text-sm text-green-700">
                  <strong>Checklist:</strong> {checklistAtual?.nome}
                </p>
                <p className="text-xs text-green-600 mt-2">
                  Data: {format(new Date(), 'dd/MM/yyyy HH:mm')}
                </p>
              </div>

              <Button
                onClick={resetarScanner}
                className="w-full h-14 text-lg font-bold bg-green-600 hover:bg-green-700"
              >
                <CheckCircle className="w-6 h-6 mr-2" />
                Escanear Próximo Ativo
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return null;
}