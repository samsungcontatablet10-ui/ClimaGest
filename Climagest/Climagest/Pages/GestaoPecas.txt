import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Plus, Package, AlertTriangle, TrendingUp, Search, Pencil } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";

export default function GestaoPecas() {
  const [showForm, setShowForm] = useState(false);
  const [editingPeca, setEditingPeca] = useState(null);
  const [busca, setBusca] = useState('');

  const queryClient = useQueryClient();

  const { data: pecas, isLoading } = useQuery({
    queryKey: ['pecas'],
    queryFn: () => base44.entities.Peca.list('-created_date'),
    initialData: [],
  });

  const [formData, setFormData] = useState({
    codigo: '',
    nome: '',
    descricao: '',
    fornecedor: '',
    preco_unitario: 0,
    estoque_atual: 0,
    estoque_minimo: 0,
    unidade_medida: 'unidade',
    categoria: 'outro'
  });

  const createPecaMutation = useMutation({
    mutationFn: (pecaData) => base44.entities.Peca.create(pecaData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['pecas'] });
      setShowForm(false);
      setEditingPeca(null);
      resetForm();
    },
  });

  const updatePecaMutation = useMutation({
    mutationFn: ({ id, pecaData }) => base44.entities.Peca.update(id, pecaData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['pecas'] });
      setShowForm(false);
      setEditingPeca(null);
      resetForm();
    },
  });

  const resetForm = () => {
    setFormData({
      codigo: '',
      nome: '',
      descricao: '',
      fornecedor: '',
      preco_unitario: 0,
      estoque_atual: 0,
      estoque_minimo: 0,
      unidade_medida: 'unidade',
      categoria: 'outro'
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (editingPeca) {
      updatePecaMutation.mutate({ id: editingPeca.id, pecaData: formData });
    } else {
      createPecaMutation.mutate(formData);
    }
  };

  const handleEdit = (peca) => {
    setEditingPeca(peca);
    setFormData(peca);
    setShowForm(true);
  };

  const pecasComAlerta = pecas.filter(p => p.estoque_atual <= p.estoque_minimo);
  const valorTotalEstoque = pecas.reduce((sum, p) => sum + (p.estoque_atual * p.preco_unitario), 0);
  
  const pecasFiltradas = pecas.filter(p => 
    !busca || 
    p.codigo.toLowerCase().includes(busca.toLowerCase()) ||
    p.nome.toLowerCase().includes(busca.toLowerCase())
  );

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="text-4xl font-bold text-slate-900 mb-2">Gestão de Peças e Materiais</h1>
            <p className="text-slate-600">Controle de estoque e materiais utilizados</p>
          </div>
          <Button 
            onClick={() => {
              resetForm();
              setEditingPeca(null);
              setShowForm(true);
            }}
            className="bg-green-600 hover:bg-green-700"
          >
            <Plus className="w-4 h-4 mr-2" />
            Nova Peça
          </Button>
        </div>

        {/* KPIs */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card className="border-none shadow-lg bg-gradient-to-br from-blue-50 to-blue-100">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-blue-600 font-medium">Total de Peças</p>
                  <p className="text-3xl font-bold text-blue-900">{pecas.length}</p>
                </div>
                <Package className="w-12 h-12 text-blue-600 opacity-50" />
              </div>
            </CardContent>
          </Card>

          <Card className="border-none shadow-lg bg-gradient-to-br from-orange-50 to-orange-100">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-orange-600 font-medium">Alertas de Estoque</p>
                  <p className="text-3xl font-bold text-orange-900">{pecasComAlerta.length}</p>
                </div>
                <AlertTriangle className="w-12 h-12 text-orange-600 opacity-50" />
              </div>
            </CardContent>
          </Card>

          <Card className="border-none shadow-lg bg-gradient-to-br from-green-50 to-green-100">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-green-600 font-medium">Valor em Estoque</p>
                  <p className="text-3xl font-bold text-green-900">R$ {valorTotalEstoque.toFixed(0)}</p>
                </div>
                <TrendingUp className="w-12 h-12 text-green-600 opacity-50" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Alertas */}
        {pecasComAlerta.length > 0 && (
          <Card className="border-none shadow-lg bg-red-50 border-red-200">
            <CardHeader className="border-b border-red-200">
              <CardTitle className="flex items-center gap-2 text-red-900">
                <AlertTriangle className="w-5 h-5" />
                Alertas de Estoque Baixo
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid md:grid-cols-2 gap-3">
                {pecasComAlerta.map(peca => (
                  <div key={peca.id} className="bg-white p-3 rounded-lg border border-red-200">
                    <div className="flex justify-between">
                      <div>
                        <p className="font-bold">{peca.codigo}</p>
                        <p className="text-sm text-slate-600">{peca.nome}</p>
                      </div>
                      <Badge variant="destructive">
                        {peca.estoque_atual}/{peca.estoque_minimo}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Busca */}
        <div className="relative">
          <Search className="absolute left-3 top-3 w-5 h-5 text-slate-400" />
          <Input
            placeholder="Buscar peças..."
            value={busca}
            onChange={(e) => setBusca(e.target.value)}
            className="pl-10"
          />
        </div>

        {/* Tabela */}
        <Card className="shadow-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Código</TableHead>
                <TableHead>Nome</TableHead>
                <TableHead>Categoria</TableHead>
                <TableHead>Estoque</TableHead>
                <TableHead>Preço</TableHead>
                <TableHead>Fornecedor</TableHead>
                <TableHead>Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {pecasFiltradas.map(peca => (
                <TableRow key={peca.id}>
                  <TableCell>{peca.codigo}</TableCell>
                  <TableCell>{peca.nome}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{peca.categoria}</Badge>
                  </TableCell>
                  <TableCell>
                    {peca.estoque_atual <= peca.estoque_minimo ? (
                      <Badge variant="destructive">{peca.estoque_atual}</Badge>
                    ) : (
                      <span>{peca.estoque_atual} {peca.unidade_medida}</span>
                    )}
                  </TableCell>
                  <TableCell>R$ {peca.preco_unitario.toFixed(2)}</TableCell>
                  <TableCell>{peca.fornecedor || '-'}</TableCell>
                  <TableCell>
                    <Button variant="ghost" size="icon" onClick={() => handleEdit(peca)}>
                      <Pencil className="w-4 h-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </Card>

        {/* Dialog Form */}
        <Dialog open={showForm} onOpenChange={setShowForm}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>{editingPeca ? 'Editar Peça' : 'Nova Peça'}</DialogTitle>
            </DialogHeader>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <Label>Código *</Label>
                  <Input
                    value={formData.codigo}
                    onChange={(e) => setFormData({...formData, codigo: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <Label>Nome *</Label>
                  <Input
                    value={formData.nome}
                    onChange={(e) => setFormData({...formData, nome: e.target.value})}
                    required
                  />
                </div>
              </div>

              <div>
                <Label>Descrição</Label>
                <Textarea
                  value={formData.descricao}
                  onChange={(e) => setFormData({...formData, descricao: e.target.value})}
                />
              </div>

              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <Label>Categoria</Label>
                  <Select
                    value={formData.categoria}
                    onValueChange={(value) => setFormData({...formData, categoria: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="filtro">Filtro</SelectItem>
                      <SelectItem value="gas_refrigerante">Gás Refrigerante</SelectItem>
                      <SelectItem value="peca_eletrica">Peça Elétrica</SelectItem>
                      <SelectItem value="peca_mecanica">Peça Mecânica</SelectItem>
                      <SelectItem value="ferramenta">Ferramenta</SelectItem>
                      <SelectItem value="outro">Outro</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Unidade</Label>
                  <Select
                    value={formData.unidade_medida}
                    onValueChange={(value) => setFormData({...formData, unidade_medida: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="unidade">Unidade</SelectItem>
                      <SelectItem value="litro">Litro</SelectItem>
                      <SelectItem value="kg">Kg</SelectItem>
                      <SelectItem value="metro">Metro</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid md:grid-cols-3 gap-4">
                <div>
                  <Label>Preço Unitário</Label>
                  <Input
                    type="number"
                    step="0.01"
                    value={formData.preco_unitario}
                    onChange={(e) => setFormData({...formData, preco_unitario: parseFloat(e.target.value)})}
                  />
                </div>
                <div>
                  <Label>Estoque Atual</Label>
                  <Input
                    type="number"
                    value={formData.estoque_atual}
                    onChange={(e) => setFormData({...formData, estoque_atual: parseInt(e.target.value)})}
                  />
                </div>
                <div>
                  <Label>Estoque Mínimo</Label>
                  <Input
                    type="number"
                    value={formData.estoque_minimo}
                    onChange={(e) => setFormData({...formData, estoque_minimo: parseInt(e.target.value)})}
                  />
                </div>
              </div>

              <div>
                <Label>Fornecedor</Label>
                <Input
                  value={formData.fornecedor}
                  onChange={(e) => setFormData({...formData, fornecedor: e.target.value})}
                />
              </div>

              <div className="flex justify-end gap-3">
                <Button type="button" variant="outline" onClick={() => setShowForm(false)}>
                  Cancelar
                </Button>
                <Button type="submit">
                  {editingPeca ? 'Atualizar' : 'Criar'}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}